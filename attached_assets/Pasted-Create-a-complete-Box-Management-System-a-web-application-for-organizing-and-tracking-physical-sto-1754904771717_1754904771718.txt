Create a complete Box Management System - a web application for organizing and tracking physical storage boxes and their contents. This should be packaged as a single, self-contained Docker image.

Core Functionality

Data Model
Boxes: Each box has ID (UUID), name, location, description, creation timestamp
Items: Each item has ID (UUID), box_id (foreign key), name, quantity, details, value (optional), receipt_filename (optional), creation timestamp
User Interface Features
Box Management:

List all boxes with name, location, and QR code icon
Create new boxes with name, location, description
Edit existing box details
Delete boxes (with confirmation)
Navigate directly to box by ID input
Item Management:

View items within a specific box
Add items with name, quantity, details, and optional value
Edit/delete items
Upload receipt images/PDFs for items
Display total box value (sum of quantity × value for all items)
QR Code Features:

Generate QR codes for box URLs (for easy mobile access)
Camera-based QR code scanning to navigate to boxes
Printable QR code PDFs
Search & Export:

Global fuzzy search across boxes and items (using Fuse.js)
Filter by quantity, date ranges
Export box contents to PDF (formatted table with box header)
Export box contents to CSV (raw data)
Technical Requirements

Frontend Stack
React 18+ with functional components and hooks
Tailwind CSS for styling and responsive design
React Router for client-side routing
Axios for API calls
Frontend Libraries
html5-qrcode for camera-based QR scanning
qrcode for QR code generation
jspdf and jspdf-autotable for PDF generation
fuse.js for fuzzy search functionality
Backend Stack
FastAPI (Python 3.11+) for REST API
SQLite for embedded database (no external database required)
SQLAlchemy for database ORM
databases with aiosqlite for async database operations
python-multipart for file upload handling
API Endpoints Required
GET /api/ - Health check
GET /api/boxes - List all boxes
POST /api/boxes - Create new box
GET /api/boxes/{box_id} - Get specific box
PUT /api/boxes/{box_id} - Update box details
DELETE /api/boxes/{box_id} - Delete box

GET /api/boxes/{box_id}/items - Get items in box
POST /api/items - Create new item
GET /api/items/{item_id} - Get specific item
PUT /api/items/{item_id} - Update item
DELETE /api/items/{item_id} - Delete item

POST /api/items/{item_id}/receipt - Upload receipt file
GET /api/items/{item_id}/receipt - Download receipt file
DELETE /api/items/{item_id}/receipt - Delete receipt

GET /api/search?q={query} - Search items by name/details
Single Docker Container Architecture
Package everything in one Docker image containing:

Nginx serving React frontend on port 80
FastAPI backend running on internal port 8001
SQLite database stored in /app/data/
File storage for receipts in /app/receipts/
Supervisor managing both nginx and FastAPI processes
Docker Configuration
Multi-stage build: Node.js for frontend, Python for final image
Frontend built as static files served by Nginx
Nginx proxy: /api/* requests → http://127.0.0.1:8001/*
Environment variables: DATABASE_URL=sqlite:///app/data/boxes.db
Health checks for container monitoring
Optional volume mounting for data persistence: -v $(pwd)/data:/app/data
Sample Data
Include pre-loaded sample data:

2-3 example boxes (Kitchen Storage, Garage Tools, Office Supplies)
4-6 example items with various quantities and values
Demonstrate total value calculation functionality
Key Implementation Details

Security & CORS
CORS configured to allow frontend access
File upload validation (JPEG, PNG, GIF, PDF only)
Proper error handling and HTTP status codes
Database Schema
-- Boxes table
CREATE TABLE boxes (
    id TEXT PRIMARY KEY,
    name TEXT NOT NULL,
    location TEXT NOT NULL, 
    description TEXT NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Items table
CREATE TABLE items (
    id TEXT PRIMARY KEY,
    box_id TEXT NOT NULL,
    name TEXT NOT NULL,
    quantity INTEGER NOT NULL,
    details TEXT NOT NULL,
    value REAL,
    receipt_filename TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (box_id) REFERENCES boxes (id) ON DELETE CASCADE
);
Frontend Features
Responsive design working on mobile and desktop
Loading states and error handling
Form validation
Modal dialogs for create/edit operations
Toast notifications for user feedback
Print functionality for QR codes
Build & Deployment
Provide simple commands:

# Build single Docker image
docker build -t box-management:latest .

# Run container
docker run -p 80:80 box-management:latest

# Run with persistent data
docker run -p 80:80 -v $(pwd)/data:/app/data box-management:latest
Success Criteria

The completed application should:

Load at http://localhost showing sample boxes
Allow creating, editing, and deleting boxes without errors
Support adding items with values and receipt uploads
Display accurate total box values
Generate and scan QR codes successfully
Export data to PDF and CSV formats
Provide fuzzy search across all content
Run entirely from a single Docker container
Persist data when using volume mounts
Be responsive and user-friendly on mobile devices
Additional Notes

Use UUIDs for all IDs (not MongoDB ObjectIds)
Include comprehensive error handling
Provide clear user feedback for all operations
Ensure the application works offline after initial load
Include basic loading animations and transitions
Make the interface intuitive for non-technical users